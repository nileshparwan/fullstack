import {
    CanActivate,
    ExecutionContext,
    HttpException,
    HttpStatus,
    Injectable
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { Request } from 'express';

@Injectable()
export class AuthGuard implements CanActivate {

    constructor(
        private readonly jwtService: JwtService, 
        private readonly config: ConfigService
        ) { }

    async canActivate(context: ExecutionContext): Promise<boolean> {
        let payload;
        const request = context.switchToHttp().getRequest();
        const token = this.extractTokenFromHeader(request);

        if (!token) {
            throw new HttpException(
                "Authentication failed!",
                HttpStatus.UNAUTHORIZED
            );
        }

        try {
            payload = await this.jwtService.verifyAsync(token,
                {
                    secret: this.config.get("JWT_SECRET")
                }
            )
        } catch (error) {
            throw new HttpException(
                "Authentication failed!",
                HttpStatus.UNAUTHORIZED
            );
        }

        if (!payload) {
            throw new HttpException(
                "Authentication failed!",
                HttpStatus.FORBIDDEN
            );
        }

        request["user"] = payload;
        return true
    }

    private extractTokenFromHeader(request: Request) {
        const [type, token] = request.headers.authorization.split(" ") ?? [];
        return type === "Bearer" ? token : undefined;
    }
}